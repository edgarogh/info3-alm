include "memoire.lus"

--------------------------------------------------------------------------------
-- Calcul des sorties de la machine a cafe
-- Calcul des sorties d'un automate de Moore
function CalculSortieMoore(init, c10, service, serviceR : bool)
returns(R, Cafe, B, Aucune : bool);
let
    R = serviceR;
    Cafe = B;
    B = service or serviceR;
    Aucune = init or c10;
tel;

--------------------------------------------------------------------------------
-- Calcul de l'etat suivant de la machine a cafe
function CalculEtatSuivant(init, c10, service, serviceR, s10, s20, s50, fs, rien : bool)
returns (initS, c10S, serviceS, serviceRS : bool);
let
    initS = (init and rien) or (service and fs) or (serviceR and fs);
    c10S = (init and s10) or (c10 and rien);
    serviceS = (init and s20) or (c10 and s10) or (service and rien);
    serviceRS = (init and s50) or (c10 and s20) or (c10 and s50) or (serviceR and rien);
tel;

-- Renvoie true au premier cycle, puis false indéfiniment.
-- Utile pour initialiser un automate.
node reset_once (_ignored: bool)
returns (reset : bool);
var counter : bool;
let
    counter = false -> (pre reset or pre counter);
    reset = not counter;
tel;

--------------------------------------------------------------------------
-- Automate machine a cafe
-- Des entrees:
--------  S10,S20,S50: les pieces
--        FS: Fin de service
--        RIEN
-- Des sorties:
--        R : calculer et Rendre la monnaie
--        Cafe: Servir le cafe
--        B: Bloquer l'entree des pieces
--        AUCUNE: pas de sortie
-- un reset

-- une partie calculant l'etat suivant à partir de l'état courant et des entrees
-- une partie calculant les sorties à partir de l'état courant (et des entrees pour mealy)

----Codage 1 parmi n des etats, des entrees et des sorties

--ATTENTION Il faut qu'a tout moment une et une seule des entrees soit a 1 sans quoi l'automate ne fonctionne pas comme voulu

node machinecafe_bascules (reset : bool; S10, S20, S50, FS, RIEN : bool)
--returns (R, Cafe,B,AUCUNE:bool);
-- si on veut visualiser l'etat courant
returns (R, Cafe, B, AUCUNE : bool; initS, c10S, serviceS, serviceRS : bool);
--var EtatCourant1, EtatCourant2 , EtatCourant3, EtatCourant4 :bool;
var EtatCourant1, EtatCourant2, EtatCourant3, EtatCourant4 : bool;
let
    --Memorisation de l'etat courant
    -- on suppose que l'etat initial est 1000, a changer au niveau du set/reset des bascules sinon
    EtatCourant1 = bascule(initS, true, false, reset);
    EtatCourant2 = bascule(c10S, true, reset, false) and not reset;
    EtatCourant3 = bascule(serviceS, true, reset, false) and not reset;
    EtatCourant4 = bascule(serviceRS, true, reset, false) and not reset;

    --Calcul de l'état suivant
    initS, c10S, serviceS, serviceRS = CalculEtatSuivant(EtatCourant1,EtatCourant2,EtatCourant3,EtatCourant4,S10,S20,S50,FS,RIEN);

    --Calcul des sorties
    --En Moore
    R, Cafe, B, AUCUNE = CalculSortieMoore(initS, c10S, serviceS, serviceRS);
tel;

-- Un noeud d'entrée pour luciole, reset automatique et assertions de validité d'état
node machinecafe (S10, S20, S50, FS, RIEN : bool)
returns (R, Cafe, B, AUCUNE : bool; init, c10, service, serviceR : bool);
let
    R, Cafe, B, AUCUNE, init, c10, service, serviceR = machinecafe_bascules(reset_once(false), S10, S20, S50, FS, RIEN);

    assert reset_once(false) or init or c10 or service or serviceR;
    assert reset_once(false)
        or (not init or not c10) and (not init or not service) and (not init or not serviceR)
        and (not c10 or not service) and (not init or not serviceR)
        and (not service or not serviceR)
        ;
tel;
