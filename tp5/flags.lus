function add1bit (a, b, cin : bool) returns (r, cout : bool);
let
    r = (a xor b) xor cin;

    cout = not (
            not (a and b)
        and not (b and cin)
        and not (cin and a)
    );
tel;

function is_zero <<const n: int>> (A: bool^n) returns (is_zero: bool)
var T: bool^n+1;
let
    T[0] = false;
    T[1..n] = map<<or, n>>(A, T[0..n-1]);
    is_zero = not T[n];
tel;

function addnbits <<const n: int>> (A, B : bool^n; re : bool) returns (R : bool^n; Z, C, N, V : bool; rr: int);
var T: bool^n+1;
let
    T[0] = re;
    R, T[1..n] = map<<add1bit, n>>(A, B, T[0..n-1]);
    Z = is_zero<<n>>(R);
    C = T[n];
    N = R[n-1];
    V = T[n] xor T[n-1];
    rr = entierrel<<n>>(R);
tel;

function addnbits_4 = addnbits<<4>>;

function subnbits <<const n: int>> (A, B: bool^n; re: bool) returns (R: bool^n; Z, C, N, V: bool; rr: int);
var Rt: bool^n;
var T: bool^n+1;
let
    T[0] = not re;
    Rt, T[1..n] = map<<add1bit, n>>(map<<not, n>>(A), B, T[0..n-1]);
    R = map<<not, n>>(Rt);
    Z = is_zero<<n>>(R);
    C = not T[n];
    N = R[n-1];
    V = T[n] xor T[n-1];
    rr = entierrel<<n>>(R);
tel;

function subnbits_4 = subnbits<<4>>;
